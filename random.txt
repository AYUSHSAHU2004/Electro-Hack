import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const Home = () => {
  const navigate = useNavigate();

  const [data, setData] = useState(null);
  const [otherData, setOtherData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('updates');

  useEffect(() => { 
    const fetchData = async () => {
      setLoading(true);
      try { 
        const response = await axios.get('http://localhost:5000/problems/getAllProblem'); 
        setData(response.data.data); 
        setLoading(false); 
      } catch (err) {
        setError(err.message); 
        setLoading(false); 
      }
    };

    const fetchOtherData = async () => {
      try {
        const response = await axios.get('http://localhost:5000/problems/getOtherProblem'); 
        setOtherData(response.data.data);
      } catch (err) {
        console.error('Error fetching other data:', err);
      }
    };

    fetchData(); 
    fetchOtherData();
  }, []);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;
  if (!data || data.length === 0) return <p>No data available.</p>;

  const renderContent = () => {
    const currentData = activeTab === 'updates' ? data : otherData;
    return (
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        {currentData.map((item, index) => (
          <div key={index} className="relative flex flex-col text-gray-700 bg-white shadow-md bg-clip-border rounded-xl w-full">
            <div className="relative mx-4 mt-4 overflow-hidden text-gray-700 bg-white bg-clip-border rounded-xl h-52">
              <img
                src={item.imageUrl}
                alt="card-image"
                className="object-cover w-full h-full"
              />
            </div>
            <div className="p-6">
              <div className="flex items-center justify-between mb-2">
                <p className="block font-sans text-base antialiased font-medium leading-relaxed text-blue-gray-900">
                  {item.tags}
                </p>
                <p className="block font-sans text-base antialiased font-medium leading-relaxed text-blue-gray-900">
                  {item.location}
                </p>
              </div>
              <p className="block font-sans text-sm antialiased font-normal leading-normal text-gray-700 opacity-75">
                {item.problemDetail}
              </p>
            </div>
            <div className="p-6 pt-0">
              <button
                className="align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg shadow-gray-900/10 hover:shadow-gray-900/20 focus:opacity-[0.85] active:opacity-[0.85] active:shadow-none block w-full bg-blue-gray-900/10 text-blue-gray-900 shadow-none hover:scale-105 hover:shadow-none focus:scale-105 focus:shadow-none active:scale-100"
                type="button"
              >
                Learn more
              </button>
            </div>
          </div>
        ))}
      </div>
    );
  };

  const getTitle = () => {
    if (activeTab === 'updates') {
      return 'All Updates';
    } else if (activeTab === 'other') {
      return 'Other Issues';
    }
    return 'Content';
  };

  return (
    <div className="container mx-auto text-center px-2">
      <h2 className='text-black text-xl md:text-2xl mt-2 mb-2'>{getTitle()}</h2>
      <div className="mb-4">
        <button
          onClick={() => setActiveTab('updates')}
          className={`p-2 rounded ${activeTab === 'updates' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-black'} mx-2`}
        >
          Updates
        </button>
        <button
          onClick={() => setActiveTab('other')}
          className={`p-2 rounded ${activeTab === 'other' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-black'} mx-2`}
        >
          Other
        </button>
      </div>
      {renderContent()}
    </div>
  );
};

export default Home;






import React, { useState } from 'react';

const Modal = () => {
  const [isOpen, setIsOpen] = useState(false);

  const openModal = () => setIsOpen(true);
  const closeModal = () => setIsOpen(false);

  return (
    <div className="bg-gray-100 min-h-screen p-6">
      {/* Some existing content */}
      <div className="mb-8">
        <h1 className="text-2xl font-bold mb-4">Existing Content</h1>
        <p className="text-lg">This is some content in the parent div.</p>
      </div>

      {/* Button to open the modal */}
      <button
        onClick={openModal}
        className="bg-blue-500 text-white font-bold py-2 px-4 rounded"
      >
        Open Modal
      </button>

      {/* Modal */}
      {isOpen && (
        <div className="fixed inset-0 z-50 bg-gray-800 bg-opacity-75 flex items-center justify-center">
          <div className="bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full">
            <div className="px-4 py-5 sm:px-6 flex justify-between items-center">
              <h2 className="text-xl font-medium text-gray-900">Modal Title</h2>
              <button
                onClick={closeModal}
                className="text-gray-500 hover:text-gray-700"
              >
                <svg
                  className="h-6 w-6"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            </div>
            <div className="px-4 py-5 sm:p-6">
              <img
                src="https://via.placeholder.com/400x300"
                alt="Sample Image"
                className="w-full h-64 object-cover rounded-lg mb-4"
              />
              <p className="text-gray-700 mb-4">
                This is a sample paragraph to demonstrate the modal content. You can include any text or components here as needed.
              </p>
              <p className="text-gray-700">
                Another paragraph with more detailed information.
              </p>
            </div>
            <div className="px-4 py-4 sm:px-6 flex justify-end">
              <button
                onClick={closeModal}
                className="bg-red-500 text-white font-bold py-2 px-4 rounded"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Modal;





import React, { useState } from 'react';

const Modal = ({ isOpen, onClose, modalData }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 bg-gray-800 bg-opacity-75 flex items-center justify-center">
      <div className="bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full">
        <div className="px-4 py-5 sm:px-6 flex justify-between items-center">
          <h2 className="text-xl font-medium text-gray-900">{modalData.title}</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div className="px-4 py-5 sm:p-6">
          <img src={modalData.imageUrl} alt="Sample Image" className="w-full h-64 object-cover rounded-lg mb-4" />
          <p className="text-gray-700 mb-4">{modalData.description}</p>
          <p className="text-gray-700">{modalData.details}</p>
        </div>
        <div className="px-4 py-4 sm:px-6 flex justify-end">
          <button onClick={onClose} className="bg-red-500 text-white font-bold py-2 px-4 rounded">
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

const App = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalData, setModalData] = useState({ title: '', imageUrl: '', description: '', details: '' });

  const openModalWithData = (data) => {
    setModalData(data);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setModalData({ title: '', imageUrl: '', description: '', details: '' });
  };

  const sampleData = {
    title: 'Dynamic Title',
    imageUrl: 'https://via.placeholder.com/400x300',
    description: 'This is a sample description for the modal.',
    details: 'These are additional details to showcase in the modal.'
  };

  return (
    <div className="bg-gray-100 min-h-screen p-6">
      {/* Some existing content */}
      <div className="mb-8">
        <h1 className="text-2xl font-bold mb-4">Existing Content</h1>
        <p className="text-lg">This is some content in the parent div.</p>
      </div>

      {/* Button to open the modal */}
      <button onClick={() => openModalWithData(sampleData)} className="bg-blue-500 text-white font-bold py-2 px-4 rounded">
        Open Modal with Data
      </button>

      {/* Modal */}
      <Modal isOpen={isModalOpen} onClose={closeModal} modalData={modalData} />
    </div>
  );
};

export default App;








//my modal
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Modal from './Modal'; // Adjust the import path as necessary

const Home = () => {
  const navigate = useNavigate();

  const [data, setData] = useState(null);
  const [otherData, setOtherData] = useState(null);
  const [activeTab, setActiveTab] = useState('updates');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalData, setModalData] = useState({ tags: '', imageUrl: '', problemDetail: '', location: '' });

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await axios.get('http://localhost:5000/problems/getAllProblem');
        setData(response.data.data);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    const fetchOtherData = async () => {
      try {
        const response = await axios.get('http://localhost:5000/problems/getAllCompleteProblem');
        setOtherData(response.data.data);
      } catch (err) {
        console.error('Error fetching other data:', err);
      }
    };

    fetchData();
    fetchOtherData();
  }, []);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;
  if (data.length === 0) return <p>No data available.</p>;

  const renderContent = () => {
    const currentData = activeTab === 'updates' ? data : otherData;
    return (
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        {currentData && currentData.map((item, index) => (
          <div key={index} className="relative flex flex-col text-gray-700 bg-white shadow-md bg-clip-border rounded-xl w-full">
            <div className="relative mx-4 mt-4 overflow-hidden text-gray-700 bg-white bg-clip-border rounded-xl h-52">
              <img
                src={item.imageUrl}
                alt="card-image"
                className="object-cover w-full h-full"
              />
            </div>
            <div className="p-6">
              <div className="flex items-center justify-between mb-2">
                <p className="block font-sans text-base antialiased font-medium leading-relaxed text-blue-gray-900">
                  {item.tags}
                </p>
                <p className="block font-sans text-base antialiased font-medium leading-relaxed text-blue-gray-900">
                  {item.location}
                </p>
              </div>
              <p className="block font-sans text-sm antialiased font-normal leading-normal text-gray-700 opacity-75">
                {item.problemDetail}
              </p>
            </div>
            <div className="p-6 pt-0">
              <button
                onClick={() => openModalWithData(item)}
                className="align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg shadow-gray-900/10 hover:shadow-gray-900/20 focus:opacity-[0.85] active:opacity-[0.85] active:shadow-none block w-full bg-blue-gray-900/10 text-blue-gray-900 shadow-none hover:scale-105 hover:shadow-none focus:scale-105 focus:shadow-none active:scale-100"
                type="button"
              >
                Learn more
              </button>
            </div>
          </div>
        ))}
      </div>
    );
  };

  const openModalWithData = (data) => {
    setModalData(data);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setModalData({ tags: '', imageUrl: '', problemDetail: '', location: '' });
  };

  const getTitle = () => {
    if (activeTab === 'updates') {
      return 'Pending Issues';
    } else if (activeTab === 'other') {
      return 'Solved Issues';
    }
    return 'Content';
  };

  return (
    <div className="container mx-auto text-center px-2">
      <div className="mb-4 mt-6">
        <button
          onClick={() => setActiveTab('updates')}
          className={`p-2 rounded ${activeTab === 'updates' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-black'} mx-2`}
        >
          Pending Issues
        </button>
        <button
          onClick={() => setActiveTab('other')}
          className={`p-2 rounded ${activeTab === 'other' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-black'} mx-2`}
        >
          Solved Issues
        </button>
      </div>
      <h2 className='text-black text-xl md:text-2xl mt-2 mb-2'>{getTitle()}</h2>
      {renderContent()}
      <Modal isOpen={isModalOpen} onClose={closeModal} data={modalData} />
    </div>
  );
};

export default Home;


// original Home
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const Home = () => {
  const navigate = useNavigate();

  const [data, setData] = useState(null);
  const [otherData, setOtherData] = useState(null);
  const [activeTab, setActiveTab] = useState('updates');
   const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);


    



  useEffect(() => { const fetchData = async () => {
    setLoading(true)
     try { 
      const response = await axios.get('http://localhost:5000/problems/getAllProblem'); 
     setData(response.data.data); 
     setLoading(false); 
    } catch (err) {
       setError(err.message); 
       setLoading(false); 
      } };

      const fetchOtherData = async () => {
        try {
          const response = await axios.get('http://localhost:5000/problems/getAllCompleteProblem'); 
          setOtherData(response.data.data);
        } catch (err) {
          console.error('Error fetching other data:', err);
        }
      };
  
      fetchData(); 
      fetchOtherData(); 
    }, []);

    if (loading) return <p>Loading...</p>;
     if (error) return <p>Error: {error}</p>;
      if (data.length === 0) return <p>No data available.</p>;


      const renderContent = () => {
        const currentData = activeTab === 'updates' ? data : otherData;
        return (
          <div>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {currentData && currentData.map((item, index) => (
              <div key={index} className="relative flex flex-col text-gray-700 bg-white shadow-md bg-clip-border rounded-xl w-full">
                <div className="relative mx-4 mt-4 overflow-hidden text-gray-700 bg-white bg-clip-border rounded-xl h-52">
                  <img
                    src={item.imageUrl}
                    alt="card-image"
                    className="object-cover w-full h-full"
                  />
                </div>
                <div className="p-6">
                  <div className="flex items-center justify-between mb-2">
                    <p className="block font-sans text-base antialiased font-medium leading-relaxed text-blue-gray-900">
                      {item.tags}
                    </p>
                    <p className="block font-sans text-base antialiased font-medium leading-relaxed text-blue-gray-900">
                      {item.location}
                    </p>
                  </div>
                  <p className="block font-sans text-sm antialiased font-normal leading-normal text-gray-700 opacity-75">
                    {item.problemDetail}
                  </p>
                </div>
                <div className="p-6 pt-0">
                  <button
                    className="align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg shadow-gray-900/10 hover:shadow-gray-900/20 focus:opacity-[0.85] active:opacity-[0.85] active:shadow-none block w-full bg-blue-gray-900/10 text-blue-gray-900 shadow-none hover:scale-105 hover:shadow-none focus:scale-105 focus:shadow-none active:scale-100"
                    type="button"
                  >
                    Learn more
                  </button>
                </div>
              </div>
            ))}
          </div>
          </div>
        );
      };

      const getTitle = () => { if (activeTab === 'updates') { return 'Pending Issues'; } else if (activeTab === 'other') { return 'Solved Issues'; } return 'Content'; };

      return (
        <div className="container mx-auto text-center px-2">
          
          <div className="mb-4 mt-6">
        <button
          onClick={() => setActiveTab('updates')}
          className={`p-2 rounded ${activeTab === 'updates' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-black'} mx-2`}
        >
          Pending Issues
        </button>
        <button
          onClick={() => setActiveTab('other')}
          className={`p-2 rounded ${activeTab === 'other' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-black'} mx-2`}
        >
          Solved Issues
        </button>
      </div>
      <h2 className='text-black text-xl md:text-2xl mt-2 mb-2'>{getTitle()}</h2>
          {renderContent()}
        </div>
      );
    };
    
    export default Home;




