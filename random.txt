import React, { useState } from 'react';
import axios from 'axios';
import { signInWithPopup } from 'firebase/auth';
import { auth, googleProvider } from '../../firebase/firebase';
import { motion } from 'framer-motion';

const SignUp = ({onLogin}) => {
  const [role, setRole] = useState('');
  const [email, setEmail] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [location, setLocation] = useState('');
  const [department, setDepartment] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const [PublicState, setPublicState] = useState({ email: '', phoneNumber: '' });
  const [AuthorityState, setAuthorityState] = useState({ email: '', phoneNumber: '', location: '', department: '' });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
  
    // Retrieve the email from localStorage
  
    try {
      const result = await signInWithPopup(auth, googleProvider);
      const user = result.user;
      localStorage.setItem("user",user.email);
      onLogin(user);
      if (role === 'Public') {
        // Send POST request to Public SignUp endpoint
        const response = await axios.post('http://localhost:5000/users/SignUpPublic', {
          email: user.email, // Include email from localStorage
          phoneNumber: PublicState.phoneNumber, // Include phone number from the form
        });
  
        if (response.status === 201) {
          setSuccess('Successfully registered as Public!');
          setPublicState({ phoneNumber: '' }); // Resetting fields after successful registration
        }
      } else if (role === 'Authority') {
        // Send POST request to Authority SignUp endpoint
        const response = await axios.post('http://localhost:5000/users/SignUpAuthority', {
          email: user.email, // Include email from localStorage
          phoneNumber: AuthorityState.phoneNumber, // Include phone number from the form
          Location: AuthorityState.location, // Include location from the form
          Department: AuthorityState.department, // Include department from the form
        });
  
        if (response.status === 201) {
          setSuccess('Successfully registered as Authority!');
          setAuthorityState({ phoneNumber: '', location: '', department: '' }); // Resetting fields after successful registration
        }
      }
    } catch (error) {
      console.error('Error during user registration:', error);
      setError('Registration failed. Please try again.');
    }
  };
  
  

  const handleRoleChange = (e) => {
    setRole(e.target.value);
  };

  const handlePublicInputChange = (e) => {
    const { name, value } = e.target;
    setPublicState((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleAuthorityInputChange = (e) => {
    const { name, value } = e.target;
    setAuthorityState((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0, scale: 0.9, y: 50 },
    visible: { opacity: 1, scale: 1, y: 0, transition: { duration: 0.5 } },
  };

  const buttonVariants = {
    hover: { scale: 1.1, boxShadow: '0px 0px 8px rgba(0, 0, 0, 0.3)' },
    tap: { scale: 0.95 },
  };

  return (
    <motion.div
      initial="hidden"
      animate="visible"
      variants={containerVariants}
      style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}
    >
      <motion.h2
        initial={{ y: -10, opacity: 0 }}
        animate={{ y: 0, opacity: 1, transition: { duration: 0.3 } }}
      >
        Create Your Account
      </motion.h2>
      <form
        onSubmit={handleSubmit}
        style={{
          marginTop: '20px',
          width: '100%',
          maxWidth: '400px',
          display: 'flex',
          flexDirection: 'column',
        }}
      >
        {/* Role Selection */}
        <select
          value={role}
          onChange={handleRoleChange}
          required
          style={{
            width: '100%',
            padding: '10px',
            marginBottom: '10px',
            fontSize: '16px',
            borderRadius: '5px',
            border: '1px solid #ccc',
          }}
        >
          <option value="">Select Role</option>
          <option value="Public">Public</option>
          <option value="Authority">Authority</option>
        </select>

        {/* Public Role Inputs */}
        {role === 'Public' && (
          <>
            <input
              type="text"
              name="phoneNumber"
              placeholder="Enter your phone number"
              value={PublicState.phoneNumber}
              onChange={handlePublicInputChange}
              required
              style={{
                width: '100%',
                padding: '10px',
                marginBottom: '10px',
                fontSize: '16px',
                borderRadius: '5px',
                border: '1px solid #ccc',
              }}
            />
          </>
        )}

        {/* Authority Role Inputs */}
        {role === 'Authority' && (
          <>
            <input
              type="text"
              name="phoneNumber"
              placeholder="Enter your phone number"
              value={AuthorityState.phoneNumber}
              onChange={handleAuthorityInputChange}
              required
              style={{
                width: '100%',
                padding: '10px',
                marginBottom: '10px',
                fontSize: '16px',
                borderRadius: '5px',
                border: '1px solid #ccc',
              }}
            />
            <input
              type="text"
              name="location"
              placeholder="Enter your location"
              value={AuthorityState.location}
              onChange={handleAuthorityInputChange}
              required
              style={{
                width: '100%',
                padding: '10px',
                marginBottom: '10px',
                fontSize: '16px',
                borderRadius: '5px',
                border: '1px solid #ccc',
              }}
            />
            <input
              type="text"
              name="department"
              placeholder="Enter your department"
              value={AuthorityState.department}
              onChange={handleAuthorityInputChange}
              required
              style={{
                width: '100%',
                padding: '10px',
                marginBottom: '10px',
                fontSize: '16px',
                borderRadius: '5px',
                border: '1px solid #ccc',
              }}
            />
          </>
        )}

        {error && (
          <div
            style={{
              color: 'red',
              marginBottom: '10px',
              fontSize: '14px',
              textAlign: 'center',
            }}
          >
            {error}
          </div>
        )}
        {success && (
          <div
            style={{
              color: 'green',
              marginBottom: '10px',
              fontSize: '14px',
              textAlign: 'center',
            }}
          >
            {success}
          </div>
        )}

        <motion.button
          type="submit"
          variants={buttonVariants}
          whileHover="hover"
          whileTap="tap"
          style={{
            width: '100%',
            padding: '10px',
            fontSize: '16px',
            borderRadius: '5px',
            cursor: 'pointer',
            backgroundColor: '#4CAF50',
            color: 'white',
            border: 'none',
          }}
        >
          Sign Up
        </motion.button>
      </form>
    </motion.div>
  );
};

export default SignUp;




import React, { useState } from 'react';
import axios from 'axios';
import { signInWithPopup } from 'firebase/auth';
import { auth, googleProvider } from '../../firebase/firebase';

const SignUp = ({ onLogin }) => {
  const [role, setRole] = useState('');
  const [PublicState, setPublicState] = useState({ phoneNumber: '' });
  const [AuthorityState, setAuthorityState] = useState({
    phoneNumber: '',
    location: '',
    department: '',
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    try {
      const result = await signInWithPopup(auth, googleProvider);
      const user = result.user;
      localStorage.setItem('user', user.email);
      onLogin(user);

      if (role === 'Public') {
        const response = await axios.post(
          'http://localhost:5000/users/SignUpPublic',
          {
            email: user.email,
            phoneNumber: PublicState.phoneNumber,
          }
        );
        if (response.status === 201) {
          setSuccess('Successfully registered as Public!');
          setPublicState({ phoneNumber: '' });
        }
      } else if (role === 'Authority') {
        const response = await axios.post(
          'http://localhost:5000/users/SignUpAuthority',
          {
            email: user.email,
            phoneNumber: AuthorityState.phoneNumber,
            location: AuthorityState.location,
            department: AuthorityState.department,
          }
        );
        if (response.status === 201) {
          setSuccess('Successfully registered as Authority!');
          setAuthorityState({ phoneNumber: '', location: '', department: '' });
        }
      }
    } catch (error) {
      console.error('Error during user registration:', error);
      setError('Registration failed. Please try again.');
    }
  };

  const handlePublicInputChange = (e) => {
    const { name, value } = e.target;
    setPublicState((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleAuthorityInputChange = (e) => {
    const { name, value } = e.target;
    setAuthorityState((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleRoleChange = (event) => {
    setRole(event.target.value);
  };

  return (
    <div className="min-h-screen bg-gray-100 text-gray-900 flex justify-center">
      <div className="max-w-screen-xl m-0 sm:m-10 bg-white shadow sm:rounded-lg flex justify-center flex-1">
        <div className="lg:w-1/2 xl:w-5/12 p-6 sm:p-12">
          <div>
            <img
              src="civic safty long.png"
              className="w-2/3 h-auto mx-auto object-cover object-center"
              alt="Logo"
            />
          </div>
          <div className="mt-12 flex flex-col items-center">
            <h1 className="text-xl xl:text-2xl font-bold">Continue to Sign Up</h1>
            <div className="w-full flex-1 mt-8">
              <div className="mx-auto max-w-xs">
                <select
                  className="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                  value={role}
                  onChange={handleRoleChange}
                >
                  <option value="" disabled>
                    Select Role
                  </option>
                  <option value="Public">Public</option>
                  <option value="Authority">Authority</option>
                </select>

                {role === 'Public' && (
                  <input
                    name="phoneNumber"
                    value={PublicState.phoneNumber}
                    onChange={handlePublicInputChange}
                    required
                    className="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                    type="text"
                    placeholder="Enter your phone number"
                  />
                )}

                {role === 'Authority' && (
                  <>
                    <input
                      name="phoneNumber"
                      value={AuthorityState.phoneNumber}
                      onChange={handleAuthorityInputChange}
                      required
                      className="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                      type="text"
                      placeholder="Enter your phone number"
                    />
                    <input
                      name="location"
                      value={AuthorityState.location}
                      onChange={handleAuthorityInputChange}
                      required
                      className="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                      type="text"
                      placeholder="Enter your location"
                    />
                    <input
                      name="department"
                      value={AuthorityState.department}
                      onChange={handleAuthorityInputChange}
                      required
                      className="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                      type="text"
                      placeholder="Enter your department"
                    />
                  </>
                )}

                <button
                  onClick={handleSubmit}
                  className="mt-5 tracking-wide font-semibold bg-indigo-500 text-gray-100 w-full py-4 rounded-lg hover:bg-indigo-700 transition-all duration-300 ease-in-out flex items-center justify-center focus:shadow-outline focus:outline-none"
                >
                  <svg
                    className="w-6 h-6 -ml-2"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="M16 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2" />
                    <circle cx="8.5" cy="7" r="4" />
                    <path d="M20 8v6M23 11h-6" />
                  </svg>
                  <span className="ml-3">Register</span>
                </button>

              </div>
              <div className="my-12 border-b text-center">
                        <div className="leading-none px-2 inline-block text-sm text-gray-600 tracking-wide font-medium bg-white transform translate-y-1/2">
                            Already registered ? Log In here...
                        </div>
                    </div>

                    <div className="flex flex-col items-center">
                        <button className="w-full max-w-xs font-bold shadow-sm rounded-lg py-3 bg-indigo-100 text-gray-800 flex items-center justify-center transition-all duration-300 ease-in-out focus:outline-none hover:shadow focus:shadow-sm focus:shadow-outline">
                            <div className="bg-white p-2 rounded-full">
                                <svg className="w-4" viewBox="0 0 533.5 544.3">
                                    <path d="M533.5 278.4c0-18.5-1.5-37.1-4.7-55.3H272.1v104.8h147c-6.1 33.8-25.7 63.7-54.4 82.7v68h87.7c51.5-47.4 81.1-117.4 81.1-200.2z" fill="#4285f4" />
                                    <path d="M272.1 544.3c73.4 0 135.3-24.1 180.4-65.7l-87.7-68c-24.4 16.6-55.9 26-92.6 26-71 0-131.2-47.9-152.8-112.3H28.9v70.1c46.2 91.9 140.3 149.9 243.2 149.9z" fill="#34a853" />
                                    <path d="M119.3 324.3c-11.4-33.8-11.4-70.4 0-104.2V150H28.9c-38.6 76.9-38.6 167.5 0 244.4l90.4-70.1z" fill="#fbbc04" />
                                    <path d="M272.1 107.7c38.8-.6 76.3 14 104.4 40.8l77.7-77.7C405 24.6 339.7-.8 272.1 0 169.2 0 75.1 58 28.9 150l90.4 70.1c21.5-64.5 81.8-112.4 152.8-112.4z" fill="#ea4335" />
                                </svg>
                            </div>
                            <span className="ml-4">Log In with Google</span>
                        </button>
                        <p className="mt-6 text-xs text-gray-600 text-center">
                            I agree to abide by templatana's
                            <a href="#" className="border-b border-gray-500 border-dotted">Terms of Service</a>
                            and its
                            <a href="#" className="border-b border-gray-500 border-dotted">Privacy Policy</a>
                        </p>
                    </div>
            </div>
          </div>
        </div>
        <div className="flex-1 bg-indigo-100 text-center hidden lg:flex">
          <div
            className="m-12 xl:m-16 w-full bg-contain bg-center bg-no-repeat"
            style={{ backgroundImage: "url('cover1.png')" }}
          />
        </div>
      </div>
    </div>
  );
};

export default SignUp;












<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <title>Responsive Card Grid</title>
</head>
<body class="bg-gray-100 p-6">
  <div class="container mx-auto">
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
      <!-- Card Component Start -->
      <div class="relative flex flex-col text-gray-700 bg-white shadow-md bg-clip-border rounded-xl w-full">
        <div class="relative mx-4 mt-4 overflow-hidden text-gray-700 bg-white bg-clip-border rounded-xl h-96">
          <img
            src="https://images.unsplash.com/photo-1629367494173-c78a56567877?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=927&amp;q=80"
            alt="card-image" class="object-cover w-full h-full" />
        </div>
        <div class="p-6">
          <div class="flex items-center justify-between mb-2">
            <p class="block font-sans text-base antialiased font-medium leading-relaxed text-blue-gray-900">
              Apple AirPods
            </p>
            <p class="block font-sans text-base antialiased font-medium leading-relaxed text-blue-gray-900">
              $95.00
            </p>
          </div>
          <p class="block font-sans text-sm antialiased font-normal leading-normal text-gray-700 opacity-75">
            With plenty of talk and listen time, voice-activated Siri access, and an
            available wireless charging case.
          </p>
        </div>
        <div class="p-6 pt-0">
          <button
            class="align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg shadow-gray-900/10 hover:shadow-gray-900/20 focus:opacity-[0.85] active:opacity-[0.85] active:shadow-none block w-full bg-blue-gray-900/10 text-blue-gray-900 shadow-none hover:scale-105 hover:shadow-none focus:scale-105 focus:shadow-none active:scale-100"
            type="button">
            Add to Cart
          </button>
        </div>
      </div>
      <!-- Card Component End -->
      <!-- Repeat Card Component as needed -->
    </div>
  </div>
</body>
</html>

